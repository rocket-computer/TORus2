identify_outliers(value)
data %>%
group_by(roi) %>%
identify_outliers(value)
data %>%
group_by(mA) %>%
identify_outliers(value)
data %>%
group_by(roi, mA) %>%
shapiro_test(value)
data %>%
group_by(roi, mA) %>%
shapiro_test(value)
box_m(data[, "value", drop = FALSE], data$roi)
anova_summary(aov(value ~roi*mA + Error(model) , data=data))
res.aov <- anova_test(data=data, formula = value ~roi*mA + Error(model),
#error function: we want to control for that between-participant variation over all of our within-subjects variables.
effect.size='pes', type=3)
anova_summary(aov(value ~roi*mA + Error(model) , data=data))
anova_summary(aov(value ~roi*mA, data=data))
res.aov <- anova_test(data=data, formula = value ~roi*mA + Error(model),
#error function: we want to control for that between-participant variation over all of our within-subjects variables.
effect.size='pes', type=3)
res.aov <- anova_test(data=data, formula = value ~roi*mA ,
#error function: we want to control for that between-participant variation over all of our within-subjects variables.
effect.size='pes', type=3)
get_anova_table(res.aov)
knitr::kable(get_anova_table(res.aov), caption = 'ANOVA Table (type III tests) - lo mismo, mas bonito')
res.aov
pwc1 <- data %>%
group_by(roi) %>%
pairwise_t_test(
formula = value ~ group, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc1
pwc1 <- data %>%
group_by(roi) %>%
pairwise_t_test(
formula = value ~ mA, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc1
pwc1 <- data %>%
group_by(roi) %>%
pairwise_t_test(
formula = value ~ mA, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc1 <- data %>%
group_by(roi) %>%
pairwise_t_test(
formula = value ~ mA, paired = FALSE,
p.adjust.method = "bonferroni"
)
pwc1
pwc2 <- data %>%
group_by(mA) %>%
pairwise_t_test(
formula = value ~ roi, paired = FALSE,
p.adjust.method = "bonferroni"
)
pwc2
pwc2 <- data %>%
group_by(mA) %>%
pairwise_t_test(
formula = value ~ roi, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc2
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R")
),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R"),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R")),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R"),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
)
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R"),),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R")
),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R"),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R"),
x = roi,
y = value,
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1" #) choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
library(cowplot)
library(dplyr)
library(readr)
source("R_rainclouds.R")
source("summarySE.R")
source("simulateData.R")
# width and height variables for saved plots
w = 6
h = 3
# Make the figure folder if it doesn't exist yet
raincloud_plot <- ggplot(data, aes(x = mA, y = value, fill = roi)) +
geom_flat_violin(aes(fill = roi),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(block)-.15, y = brady, colour = group),position = position_jitter(width = .05), size = 1, shape = 20)+
geom_boxplot(aes(x = mA, y = value, fill = roi),outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("test anova")
raincloud_plot
library(cowplot)
library(dplyr)
library(readr)
source("R_rainclouds.R")
get_wd()
getwd()
source("R_rainclouds.R")
source("R_rainclouds.R")
w = 6
h = 3
# Make the figure folder if it doesn't exist yet
raincloud_plot <- ggplot(data, aes(x = mA, y = value, fill = roi)) +
geom_flat_violin(aes(fill = roi),position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(block)-.15, y = brady, colour = group),position = position_jitter(width = .05), size = 1, shape = 20)+
geom_boxplot(aes(x = mA, y = value, fill = roi),outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("test anova")
raincloud_plot
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R")),
x = roi,
y = value
)
install.packages("ggstatsplot")
ggstatsplot::grouped_ggbetweenstats(
data = dplyr::filter(
.data = data,
roi %in% c("dm4_R", "dm4m_R", "dm3_R", "dm2_R", "dldm_R", "dm1_R")),
x = mA,# grouping/independent variable
y = value #dependent variables
xlab = "roi", # label for the x-axis
grouping.var = roi, # grouping variable
pairwise.comparisons = FALSE,
ggsignif.args = list(textsize = 4, tip_length = 0.01),
p.adjust.method = "bonferroni", # method for adjusting p-values for multiple comparisons
# adding new components to `ggstatsplot` default
ggplot.component = list(ggplot2::scale_y_continuous(sec.axis = ggplot2::dup_axis())),
k = 2,
title.prefix = "Block",
caption = substitute(paste(italic("Source"), ":noc01 experiment")),
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1") # choosing a different color palette
plotgrid.args = list(nrow = 2),
title.text = "Bradychardia of different groups along the training procedure"
)
bxp <- ggboxplot(
data, x = "mA", y = "value",
color = "roi",
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1" # choosing a different color palette
# palette = "jco",
) +
ggtitle('last acq and first reacq')+
stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE)+
labs(
subtitle = get_test_label(pwc1, detailed = TRUE),
caption = get_pwc_label(pwc1)
)
pwc1 <- pwc1%>% add_xy_position(x = "mA")
bxp <- ggboxplot(
data, x = "mA", y = "value",
color = "roi",
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1" # choosing a different color palette
# palette = "jco",
) +
ggtitle('last acq and first reacq')+
stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE)+
labs(
subtitle = get_test_label(pwc1, detailed = TRUE),
caption = get_pwc_label(pwc1)
)
bxp
# visualizacion grouped by roi
pwc2 <- pwc2%>% add_xy_position(x = "roi")
bxp <- ggboxplot(
data, x = "roi", y = "value",
color = "mA",
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1" # choosing a different color palette
# palette = "jco",
) +
ggtitle('anova result')+
stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE)+
labs(
subtitle = get_test_label(pwc1, detailed = TRUE),
caption = get_pwc_label(pwc2)
)
bxp
pwc2 <- pwc2%>% add_xy_position(x = "mA")
bxp <- ggboxplot(
data, x = "roi", y = "value",
color = "mA",
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1" # choosing a different color palette
# palette = "jco",
) +
ggtitle('anova result')+
stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE)+
labs(
subtitle = get_test_label(pwc1, detailed = TRUE),
caption = get_pwc_label(pwc2)
)
bxp
pwc1 <- pwc1%>% add_xy_position(x = "mA")
bxp <- ggboxplot(
data, x = "mA", y = "value",
color = "roi",
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1" # choosing a different color palette
# palette = "jco",
) +
ggtitle('anova result')+
stat_pvalue_manual(pwc1, tip.length = 0, hide.ns = TRUE)+
labs(
subtitle = get_test_label(pwc1, detailed = TRUE),
caption = get_pwc_label(pwc1)
)
bxp
pwc2 <- data %>%
group_by(mA) %>%
pairwise_t_test(
formula = value ~ roi, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc2
sink('ANOVA 2w AND POST-HOC')
print("ANOVA: ANOVA SUMMARY")
anova_summary(aov(value ~roi*mA, data=data))
res.aov <- anova_test(data=data, formula = value ~roi*mA + Error(model),
#error function: we want to control for that between-participant variation over all of our within-subjects variables.
effect.size='pes', type=3)
print("ANOVA: ANOVA TABLE")
get_anova_table(res.aov)
knitr::kable(get_anova_table(res.aov), caption = 'ANOVA Table (type III tests) - lo mismo, mas bonito')
print("Complete ANOVA object to check Mauchly and Sphericity corrections")
res.aov
# 5. POST-HOC ANALYSIS
print("POST-HOC with Bonferroni adjustment")
# 5.1: PAIRWISE COMPARISONS each level of the within-s factors
# 5.1.1. Each level of block
# Paired t-test is used because we have repeated measures by time
print("POST-HOC: PAIRWISE COMPARISONS BETWEEN ROI LEVELS  (non paired)")
pwc1 <- data %>%
group_by(roi) %>%
pairwise_t_test(
formula = value ~ mA, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc1
print("POST-HOC: PAIRWISE COMPARISONS BETWEEN mA LEVELS (non paired)")
# non-pair to compare EC? because is not a rm?
pwc2 <- data %>%
group_by(mA) %>%
pairwise_t_test(
formula = value ~ roi, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc2
sink ()
bxp <- ggboxplot(
data, x = "mA", y = "value",
color = "roi", palette = c("jco"),
#facet.by =  "mA"
)
bxp
bxp <- ggboxplot(
data, x = "roi", y = "value",
color = "mA", palette = c("jco"),
)
bxp
bxp <- ggboxplot(
data, x = "roi", y = "value",
color = "mA",
ggtheme = ggthemes::theme_fivethirtyeight(), # choosing a different theme
package = "wesanderson", # package from which color palette is to be taken
palette = "Darjeeling1" # choosing a different color palette
# palette = "jco",
) +
ggtitle('differences in peak activity: mA in roi')
bxp
sink('ANOVA 2w AND POST-HOC.txt')
print("SUMMARY STATISTICS")
data%>%
group_by(roi,mA) %>%
get_summary_stats(value, show = c("mean", "sd", "se", "median"))
sink()
sink('ANOVA 2w AND POST-HOC.txt')
print("ANOVA: ANOVA SUMMARY")
anova_summary(aov(value ~roi*mA, data=data))
res.aov <- anova_test(data=data, formula = value ~roi*mA + Error(model),
#error function: we want to control for that between-participant variation over all of our within-subjects variables.
effect.size='pes', type=3)
print("ANOVA: ANOVA TABLE")
get_anova_table(res.aov)
knitr::kable(get_anova_table(res.aov), caption = 'ANOVA Table (type III tests) - lo mismo, mas bonito')
print("Complete ANOVA object to check Mauchly and Sphericity corrections")
res.aov
# 5. POST-HOC ANALYSIS
print("POST-HOC with Bonferroni adjustment")
# 5.1: PAIRWISE COMPARISONS each level of the within-s factors
# 5.1.1. Each level of block
# Paired t-test is used because we have repeated measures by time
print("POST-HOC: PAIRWISE COMPARISONS BETWEEN ROI LEVELS  (non paired)")
pwc1 <- data %>%
group_by(roi) %>%
pairwise_t_test(
formula = value ~ mA, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc1
print("POST-HOC: PAIRWISE COMPARISONS BETWEEN mA LEVELS (non paired)")
# non-pair to compare EC? because is not a rm?
pwc2 <- data %>%
group_by(mA) %>%
pairwise_t_test(
formula = value ~ roi, paired = FALSE,
p.adjust.method = "bonferroni"
) %>%
select(-df, -statistic, -p) # Remove details
pwc2
sink ()
pwc2
pwc1
pwc2
res.aov <- anova_test(data=data, formula = value ~roi*mA + Error(model),
#error function: we want to control for that between-participant variation over all of our within-subjects variables.
effect.size='pes', type=2)
print("ANOVA: ANOVA TABLE")
get_anova_table(res.aov)
res.aov <- anova_test(data=data, formula = value ~roi*mA + Error(model),
#error function: we want to control for that between-participant variation over all of our within-subjects variables.
effect.size='pes', type=1)
print("ANOVA: ANOVA TABLE")
get_anova_table(res.aov)
knitr::kable(get_anova_table(res.aov), caption = 'ANOVA Table (type III tests) - lo mismo, mas bonito')
